
user  root;
worker_processes  4;
 
daemon on;
master_process on;
worker_rlimit_core 400000000;
working_directory /tmp;
error_log  logs/error.log info;
pid        logs/nginx.pid;
error_log logs/s3_error.log info;

events {
    worker_connections  1024;
}

http {
    log_not_found off;
    client_max_body_size    100m;
    reset_timedout_connection  on;
    # Is this just for libcxml.so?
    lua_package_cpath '/root/work/lua-resty-s3/test/?.so;;';
    lua_package_path "/root/work/lua-resty-s3/lib/?.lua;;";
    
    #init_worker_by_lua_file '';
    #init_by_lua_file '';
    lua_socket_buffer_size 128k;
    lua_shared_dict s3_cache 10m;  # 块下载锁    
    lua_check_client_abort on;
    keepalive_timeout  0;

    lua_code_cache off;      
    uninitialized_variable_warn off;
    lua_socket_connect_timeout 2s;
    lua_socket_send_timeout 2s;
    lua_socket_read_timeout 2s;

    log_format log_def '$host,$server_addr,$remote_addr,$remote_user,$request_method,$request_uri,$server_protocol,$status,$body_bytes_sent,$request_time,$http_referer,$http_user_agent,$tcpinfo_rtt,$cookie_COOKIE,';
    access_log logs/access.log log_def;
    

    server {
        listen       85 default;        
        root /html;
        
        location = / {
            content_by_lua_file /root/work/lua-resty-s3/test/test_s3.lua;
        }
        location = /testauth {
            content_by_lua_file /root/work/lua-resty-s3/test/test_s3_auth.lua;
        }

        location = /testsuite {
            content_by_lua_file /root/work/lua-resty-s3/test/aws4_test.lua;
        }

        location = /testxml {
            content_by_lua_file /root/work/lua-resty-s3/test/test_xml.lua;
        }

        location = /test {
            content_by_lua '
            local iconv = require("iconv")
            local from = "iso88591"
            local to = "utf-8"
            local cd = iconv.new(to, from)
            local str = "中"
            ngx.say(ngx.escape_uri(str))
            local ostr, err = cd:iconv(str)
            if err then
                ngx.say("iconv err:", err)
            else
                ngx.say(ngx.escape_uri(ostr))
            end
            ';
        }
    }
}
